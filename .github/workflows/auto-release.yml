name: Auto Release on Version Tag

on:
  push:
    tags:
      - 'v*'  # 当推送以v开头的标签时触发

permissions:
  contents: write  # 需要写入权限来创建release
  packages: write  # 如果需要上传包

jobs:
  release:
    runs-on: macos-latest  # 使用macOS runner确保兼容性
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史用于生成发布说明
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Debug file structure
      run: |
        echo "🔍 检查项目文件结构..."
        pwd
        ls -la
        echo ""
        echo "📁 检查spec文件..."
        if [ -f "PDF书签生成器.spec" ]; then
          echo "✅ 找到spec文件: PDF书签生成器.spec"
          ls -la "PDF书签生成器.spec"
        else
          echo "❌ 未找到spec文件: PDF书签生成器.spec"
          echo "🔍 查找所有.spec文件..."
          find . -name "*.spec" -type f
        fi
        echo ""
        echo "📁 检查requirements.txt..."
        if [ -f "requirements.txt" ]; then
          echo "✅ 找到requirements.txt"
          cat requirements.txt
        else
          echo "❌ 未找到requirements.txt"
        fi
        
    - name: Build application
      run: |
        # 使用您的spec文件构建
        echo "🔨 开始构建应用..."
        
        # 检查spec文件是否存在
        if [ ! -f "PDF书签生成器.spec" ]; then
          echo "❌ 构建失败：spec文件不存在"
          echo "当前目录内容："
          ls -la
          exit 1
        fi
        
        # 构建应用
        pyinstaller "PDF书签生成器.spec"
        
        # 验证构建结果
        if [ ! -d "dist/PDF书签生成器.app" ]; then
          echo "❌ 构建失败：未找到应用文件"
          echo "dist目录内容："
          ls -la dist/ || echo "dist目录不存在"
          exit 1
        fi
        
        echo "✅ 应用构建成功"
        ls -la dist/
        
    - name: Create release zip
      run: |
        echo "📦 创建发布zip文件..."
        cd dist
        zip -r "PDF书签生成器_${GITHUB_REF_NAME}_macOS.zip" "PDF书签生成器.app"
        
        # 验证zip文件
        if [ ! -f "PDF书签生成器_${GITHUB_REF_NAME}_macOS.zip" ]; then
          echo "❌ zip文件创建失败"
          exit 1
        fi
        
        echo "✅ zip文件创建成功"
        ls -la "PDF书签生成器_${GITHUB_REF_NAME}_macOS.zip"
        
        # 返回项目根目录
        cd ..
        
    - name: Get release notes
      id: get_release_notes
      run: |
        echo "🔍 查找发布说明文件..."
        echo "版本: ${GITHUB_REF_NAME}"
        echo "查找文件: docs/releases/RELEASE_NOTES_${GITHUB_REF_NAME}.md"
        
        if [ -f "docs/releases/RELEASE_NOTES_${GITHUB_REF_NAME}.md" ]; then
          echo "✅ 找到发布说明文件"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat "docs/releases/RELEASE_NOTES_${GITHUB_REF_NAME}.md" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "📋 使用发布说明文件: docs/releases/RELEASE_NOTES_${GITHUB_REF_NAME}.md"
        else
          echo "⚠️ 未找到发布说明文件，使用默认说明"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "# PDF书签生成器 ${GITHUB_REF_NAME} 发布说明" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## 🎉 新版本发布" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**版本**: ${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          echo "**发布日期**: $(date +"%Y年%m月%d日")" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## 📝 最新提交信息" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**最后提交**: \`$(git log -1 --pretty=format:'%h')\`" >> $GITHUB_OUTPUT
          echo "**提交时间**: $(git log -1 --pretty=format:'%cd' --date=format:'%Y年%m月%d日 %H:%M:%S')" >> $GITHUB_OUTPUT
          echo "**提交者**: $(git log -1 --pretty=format:'%an')" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**提交消息**:">> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT
          git log -1 --pretty=format:'%B' >> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## ⚠️ 重要说明" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 🔒 macOS安全限制" >> $GITHUB_OUTPUT
          echo "由于macOS Gatekeeper安全机制，下载的应用可能无法直接运行。" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
                          echo "**解决方法**: " >> $GITHUB_OUTPUT
                          echo "1. 右键点击应用 → 选择'打开'" >> $GITHUB_OUTPUT
                          echo "2. 或在系统偏好设置 > 安全性与隐私中允许运行" >> $GITHUB_OUTPUT
                          echo "3. 或使用本地构建脚本（推荐）" >> $GITHUB_OUTPUT
                          echo "" >> $GITHUB_OUTPUT
                          echo "### 🏠 本地构建（推荐）" >> $GITHUB_OUTPUT
                          echo "```bash" >> $GITHUB_OUTPUT
                          echo "# 克隆仓库" >> $GITHUB_OUTPUT
                          echo "git clone https://github.com/vanabel/pdf-bookmarker.git" >> $GITHUB_OUTPUT
                          echo "cd pdf-bookmarker" >> $GITHUB_OUTPUT
                          echo "" >> $GITHUB_OUTPUT
                          echo "# 运行构建脚本" >> $GITHUB_OUTPUT
                          echo "./build_macos_optimized.sh" >> $GITHUB_OUTPUT
                          echo "```" >> $GITHUB_OUTPUT
                          echo "" >> $GITHUB_OUTPUT
                          echo "本地构建将自动处理所有兼容性问题！" >> $GITHUB_OUTPUT
                          echo "EOF" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: PDF书签生成器 ${{ github.ref_name }}
        body: ${{ steps.get_release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: false
        files: dist/PDF书签生成器_${{ github.ref_name }}_macOS.zip
        
    - name: Verify upload
      run: |
        echo "🔍 验证上传结果..."
        echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
        echo "上传的zip文件: PDF书签生成器_${{ github.ref_name }}_macOS.zip"
        
    - name: Cleanup build files
      if: always()
      run: |
        echo "🧹 清理构建文件..."
        rm -rf build dist __pycache__
        find . -name "*.pyc" -delete
        echo "✅ 清理完成"
